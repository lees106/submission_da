
DA4BT1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006dc  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000633  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000029a  00000000  00000000  00000f73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001210  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000358  00000000  00000000  00001244  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  88:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <delay_here>:
		delay_here();
	}
}

void delay_here() {
	while (!(TIFR1 & (1<<OCF1A)));      // Delays using CTC
  90:	b1 9b       	sbis	0x16, 1	; 22
  92:	fe cf       	rjmp	.-4      	; 0x90 <delay_here>
	TIFR1 |= (1 << OCF1A);				// Resets flag, now it repeats 3 times
  94:	b1 9a       	sbi	0x16, 1	; 22
  96:	08 95       	ret

00000098 <main>:
volatile unsigned int ADCVal;
void delay_here();

int main(void) {
		
	DDRB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2) | (1 << DDB3);		// Output
  98:	84 b1       	in	r24, 0x04	; 4
  9a:	8f 60       	ori	r24, 0x0F	; 15
  9c:	84 b9       	out	0x04, r24	; 4
	DDRC = 0;															// Input
  9e:	17 b8       	out	0x07, r1	; 7
		
	// Timer 1
	TCCR1B = (1 << WGM12) | (1 << CS11);	// Prescaler set to 8
  a0:	8a e0       	ldi	r24, 0x0A	; 10
  a2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	// ADC Init
	DIDR0 = 0x1;							// Disable ADC0 pin
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	ADMUX = (1<<REFS0);						// Ref is aref
  ac:	80 e4       	ldi	r24, 0x40	; 64
  ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |=  (1<<ADEN) | (1<<ADPS2);      
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	84 68       	ori	r24, 0x84	; 132
  ba:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS1) | (1<<ADPS0);		// Enable ADC
  bc:	80 81       	ld	r24, Z
  be:	83 60       	ori	r24, 0x03	; 3
  c0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);			        // Starts conversion
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
	ADCSRB = 0x0;							// FRM
  c8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	while(1) {
		while ((ADCSRA & (1<<ADIF)) == 0);	// Waits for conversion
  cc:	ca e7       	ldi	r28, 0x7A	; 122
  ce:	d0 e0       	ldi	r29, 0x00	; 0
		ADCVal = ADC & 0x03FF;			    // Takes right 10-bits of ADC register
  d0:	0f 2e       	mov	r0, r31
  d2:	f8 e7       	ldi	r31, 0x78	; 120
  d4:	ef 2e       	mov	r14, r31
  d6:	f1 2c       	mov	r15, r1
  d8:	f0 2d       	mov	r31, r0
		OCR1A = 10*ADCVal;				    // OCR1A value for duty cycle
  da:	08 e8       	ldi	r16, 0x88	; 136
  dc:	10 e0       	ldi	r17, 0x00	; 0

		PORTB = 0x09;
  de:	0f 2e       	mov	r0, r31
  e0:	f9 e0       	ldi	r31, 0x09	; 9
  e2:	af 2e       	mov	r10, r31
  e4:	f0 2d       	mov	r31, r0
		delay_here();
		
		PORTB = 0x03;
  e6:	0f 2e       	mov	r0, r31
  e8:	f3 e0       	ldi	r31, 0x03	; 3
  ea:	bf 2e       	mov	r11, r31
  ec:	f0 2d       	mov	r31, r0
		delay_here();
		
		PORTB = 0x06;
  ee:	0f 2e       	mov	r0, r31
  f0:	f6 e0       	ldi	r31, 0x06	; 6
  f2:	cf 2e       	mov	r12, r31
  f4:	f0 2d       	mov	r31, r0
		delay_here();
		
		PORTB = 0x0C;
  f6:	0f 2e       	mov	r0, r31
  f8:	fc e0       	ldi	r31, 0x0C	; 12
  fa:	df 2e       	mov	r13, r31
  fc:	f0 2d       	mov	r31, r0
	ADCSRA |= (1<<ADPS1) | (1<<ADPS0);		// Enable ADC
	ADCSRA |= (1 << ADSC);			        // Starts conversion
	ADCSRB = 0x0;							// FRM
	
	while(1) {
		while ((ADCSRA & (1<<ADIF)) == 0);	// Waits for conversion
  fe:	88 81       	ld	r24, Y
 100:	84 ff       	sbrs	r24, 4
 102:	fd cf       	rjmp	.-6      	; 0xfe <main+0x66>
		ADCVal = ADC & 0x03FF;			    // Takes right 10-bits of ADC register
 104:	f7 01       	movw	r30, r14
 106:	80 81       	ld	r24, Z
 108:	91 81       	ldd	r25, Z+1	; 0x01
 10a:	93 70       	andi	r25, 0x03	; 3
 10c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		OCR1A = 10*ADCVal;				    // OCR1A value for duty cycle
 114:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 118:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 11c:	9c 01       	movw	r18, r24
 11e:	22 0f       	add	r18, r18
 120:	33 1f       	adc	r19, r19
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	82 0f       	add	r24, r18
 130:	93 1f       	adc	r25, r19
 132:	f8 01       	movw	r30, r16
 134:	91 83       	std	Z+1, r25	; 0x01
 136:	80 83       	st	Z, r24

		PORTB = 0x09;
 138:	a5 b8       	out	0x05, r10	; 5
		delay_here();
 13a:	0e 94 48 00 	call	0x90	; 0x90 <delay_here>
		
		PORTB = 0x03;
 13e:	b5 b8       	out	0x05, r11	; 5
		delay_here();
 140:	0e 94 48 00 	call	0x90	; 0x90 <delay_here>
		
		PORTB = 0x06;
 144:	c5 b8       	out	0x05, r12	; 5
		delay_here();
 146:	0e 94 48 00 	call	0x90	; 0x90 <delay_here>
		
		PORTB = 0x0C;
 14a:	d5 b8       	out	0x05, r13	; 5
		delay_here();
 14c:	0e 94 48 00 	call	0x90	; 0x90 <delay_here>
	}
 150:	d6 cf       	rjmp	.-84     	; 0xfe <main+0x66>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
