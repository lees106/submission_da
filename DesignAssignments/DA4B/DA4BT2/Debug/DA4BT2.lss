
DA4BT2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000755  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068c  00000000  00000000  0000093d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bf  00000000  00000000  00000fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a5  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001671  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <timer_init>:
}

void timer_init(void)
{
	//Timer1
	TCCR1A = (1 << COM1A1) | (1<<COM1B1) | (1<<WGM11);			// Non-inverting Mode, Fast PWM Mode
  80:	82 ea       	ldi	r24, 0xA2	; 162
  82:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1<<WGM13) | (1<<WGM12) | (1<<CS11) | (1<<CS10);	// Prescaler = 64
  86:	8b e1       	ldi	r24, 0x1B	; 27
  88:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  8c:	08 95       	ret

0000008e <ADC_init>:
}

void ADC_init (void)
{
	// ADC initialization
	ADMUX = (1<<REFS0);											// Reference = Aref, ADC0 (PC.0) used as analog input
  8e:	80 e4       	ldi	r24, 0x40	; 64
  90:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	
	// right-justified data
	ADCSRA |= (1<<ADEN) | (1 << ADSC) | (1<<ADPS2) | 
  94:	ea e7       	ldi	r30, 0x7A	; 122
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	87 6c       	ori	r24, 0xC7	; 199
  9c:	80 83       	st	Z, r24
	(1<<ADPS1) | (1<<ADPS0);									// enable ADC, system clock used for ADC
	ADCSRB = 0x0;												// free running mode
  9e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  a2:	08 95       	ret

000000a4 <main>:
void timer_init(void);
void ADC_init(void);

int main(void)
{
	timer_init();
  a4:	0e 94 40 00 	call	0x80	; 0x80 <timer_init>
	ADC_init();
  a8:	0e 94 47 00 	call	0x8e	; 0x8e <ADC_init>
	
	while(1)
	{
		ADC_init();
		ICR1 = 0xFFFF;											// fPWM = 50Hz
  ac:	0f 2e       	mov	r0, r31
  ae:	f6 e8       	ldi	r31, 0x86	; 134
  b0:	cf 2e       	mov	r12, r31
  b2:	d1 2c       	mov	r13, r1
  b4:	f0 2d       	mov	r31, r0
  b6:	ee 24       	eor	r14, r14
  b8:	ea 94       	dec	r14
  ba:	fe 2c       	mov	r15, r14
		DDRB |= (1<<DDB1);										// Enables PB1 as output
		OCR1A = ADC;											// Grabs value from potentiometer to timer1
  bc:	08 e7       	ldi	r16, 0x78	; 120
  be:	10 e0       	ldi	r17, 0x00	; 0
  c0:	c8 e8       	ldi	r28, 0x88	; 136
  c2:	d0 e0       	ldi	r29, 0x00	; 0
	timer_init();
	ADC_init();
	
	while(1)
	{
		ADC_init();
  c4:	0e 94 47 00 	call	0x8e	; 0x8e <ADC_init>
		ICR1 = 0xFFFF;											// fPWM = 50Hz
  c8:	f6 01       	movw	r30, r12
  ca:	f1 82       	std	Z+1, r15	; 0x01
  cc:	e0 82       	st	Z, r14
		DDRB |= (1<<DDB1);										// Enables PB1 as output
  ce:	21 9a       	sbi	0x04, 1	; 4
		OCR1A = ADC;											// Grabs value from potentiometer to timer1
  d0:	f8 01       	movw	r30, r16
  d2:	80 81       	ld	r24, Z
  d4:	91 81       	ldd	r25, Z+1	; 0x01
  d6:	99 83       	std	Y+1, r25	; 0x01
  d8:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	ff ef       	ldi	r31, 0xFF	; 255
  dc:	26 e7       	ldi	r18, 0x76	; 118
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	f1 50       	subi	r31, 0x01	; 1
  e2:	20 40       	sbci	r18, 0x00	; 0
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x3c>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x46>
  ea:	00 00       	nop
  ec:	eb cf       	rjmp	.-42     	; 0xc4 <main+0x20>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
